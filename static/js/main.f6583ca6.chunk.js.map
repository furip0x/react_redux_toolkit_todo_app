{"version":3,"sources":["slices/todoSlice.js","slices/alertSlice.js","Components/List.js","Components/Alert.js","App.js","store.js","index.js"],"names":["initialStateValue","todoList","todoSlice","createSlice","name","initialState","reducers","removeAll","state","addTodo","action","newItem","id","Date","getTime","toString","title","payload","checked","editing","push","deleteTodo","newTodo","filter","item","editTodoTitle","map","todo","toggleEdit","checkTodo","actions","isVisible","type","alertSlice","showAlert","hideAlert","List","dispatch","useDispatch","list","useSelector","todos","useState","editInputName","setEditInputName","isEdit","setisEdit","setEditing","prev","className","value","onChange","e","target","onClick","stroke","fill","strokeWidth","height","width","xmlns","viewBox","d","Alert","alert","alerts","useEffect","timer","setTimeout","clearTimeout","App","setName","length","onSubmit","preventDefault","placeholder","configureStore","reducer","todoReducer","alertReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f6583ca6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialStateValue = {\r\n  todoList: [],\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: initialStateValue,\r\n  reducers: {\r\n    removeAll: (state) => {\r\n      return initialStateValue\r\n    },\r\n    addTodo: (state, action) => {\r\n      const newItem = {\r\n        id: new Date().getTime().toString(),\r\n        title: action.payload,\r\n        checked: false,\r\n        editing: false,\r\n      }\r\n\r\n      state.todoList.push(newItem)\r\n\r\n      // return {\r\n      //   ...state,\r\n      //   todoList: [...state.todoList, newItem],\r\n      // }\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      const newTodo = state.todoList.filter(\r\n        (item) => item.id !== action.payload\r\n      )\r\n\r\n      state.todoList = newTodo\r\n    },\r\n    editTodoTitle: (state, action) => {\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((todo) => {\r\n          if (todo.id === action.payload.id) {\r\n            return {\r\n              ...todo,\r\n              editing: !todo.editing,\r\n              title: action.payload.title,\r\n            }\r\n          }\r\n          return todo\r\n        }),\r\n      }\r\n    },\r\n    toggleEdit: (state, action) => {\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((todo) => {\r\n          if (todo.id === action.payload) {\r\n            return { ...todo, editing: !todo.editing }\r\n          }\r\n          return { ...todo, editing: false }\r\n        }),\r\n      }\r\n    },\r\n    checkTodo: (state, action) => {\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((todo) => {\r\n          if (todo.id === action.payload) {\r\n            return { ...todo, checked: !todo.checked }\r\n          }\r\n          return todo\r\n        }),\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const {\r\n  removeAll,\r\n  addTodo,\r\n  deleteTodo,\r\n  editTodoTitle,\r\n  checkTodo,\r\n  toggleEdit,\r\n} = todoSlice.actions\r\nexport default todoSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialStateValue = {\r\n  isVisible: false,\r\n  type: '', // classess: success, danger\r\n  title: '',\r\n}\r\n\r\nconst alertSlice = createSlice({\r\n  name: 'alert',\r\n  initialState: initialStateValue,\r\n  reducers: {\r\n    showAlert: (state, action) => {\r\n      return {\r\n        ...state,\r\n        isVisible: true,\r\n        ...action.payload,\r\n      }\r\n    },\r\n    hideAlert: (state, action) => {\r\n      return initialStateValue\r\n    },\r\n  },\r\n})\r\n\r\nexport const { showAlert, hideAlert } = alertSlice.actions\r\nexport default alertSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  deleteTodo,\r\n  editTodoTitle,\r\n  checkTodo,\r\n  toggleEdit,\r\n} from '../slices/todoSlice'\r\nimport { showAlert } from '../slices/alertSlice'\r\n\r\nconst List = () => {\r\n  const dispatch = useDispatch()\r\n  const list = useSelector((state) => state.todos.todoList)\r\n\r\n  const [editInputName, setEditInputName] = useState('')\r\n  const [isEdit, setisEdit] = useState(false)\r\n\r\n  const deleteItem = (id) => {\r\n    dispatch(deleteTodo(id))\r\n    dispatch(\r\n      showAlert({\r\n        isVisible: true,\r\n        type: 'danger',\r\n        title: 'Item deleted',\r\n      })\r\n    )\r\n  }\r\n\r\n  const editItemTitle = (id) => {\r\n    if (editInputName) {\r\n      dispatch(editTodoTitle({ id: id, title: editInputName }))\r\n      dispatch(\r\n        showAlert({\r\n          isVisible: true,\r\n          type: 'success',\r\n          title: 'Item updated',\r\n        })\r\n      )\r\n      setEditInputName('')\r\n      setisEdit(false)\r\n    } else {\r\n      dispatch(\r\n        showAlert({\r\n          isVisible: true,\r\n          type: 'danger',\r\n          title: 'Please enter a value',\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  const setEditing = (id, title) => {\r\n    setisEdit((prev) => !prev)\r\n    setEditInputName(title)\r\n    dispatch(toggleEdit(id))\r\n  }\r\n\r\n  return (\r\n    <div className={`todo-list ${isEdit && 'edit-mode-on'}`}>\r\n      {list.map((todo) => {\r\n        return (\r\n          <div\r\n            key={todo.id}\r\n            className={`todo-item ${todo.checked && 'checked'} ${\r\n              todo.editing && 'editing-item'\r\n            }`}\r\n          >\r\n            {todo.editing ? (\r\n              <div className='todo-edit-input'>\r\n                <input\r\n                  type='text'\r\n                  value={editInputName}\r\n                  onChange={(e) => setEditInputName(e.target.value)}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <button\r\n                  type='button'\r\n                  className='todo-item-check-btn'\r\n                  onClick={() => dispatch(checkTodo(todo.id))}\r\n                >\r\n                  <svg\r\n                    stroke='currentColor'\r\n                    fill='currentColor'\r\n                    strokeWidth='0'\r\n                    height='1em'\r\n                    width='1em'\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    viewBox='0 0 512 512'\r\n                  >\r\n                    <path\r\n                      fill='currentColor'\r\n                      d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'\r\n                    ></path>\r\n                  </svg>\r\n                </button>\r\n                <div className='todo-item-title'>\r\n                  <div>{todo.title}</div>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            <div className='todo-item-buttons'>\r\n              {todo.editing ? (\r\n                <>\r\n                  <button\r\n                    type='button'\r\n                    className='todo-item-submit'\r\n                    onClick={() => editItemTitle(todo.id)}\r\n                  >\r\n                    Update\r\n                  </button>\r\n                  <button\r\n                    type='button'\r\n                    className='todo-item-cancel-edit'\r\n                    onClick={() => setEditing(todo.id)}\r\n                  >\r\n                    &times;\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <button\r\n                    type='button'\r\n                    className={`todo-item-edit ${todo.checked && 'hidden'}`}\r\n                    onClick={() => setEditing(todo.id, todo.title)}\r\n                  >\r\n                    <svg\r\n                      stroke='currentColor'\r\n                      fill='currentColor'\r\n                      strokeWidth='0'\r\n                      viewBox='0 0 576 512'\r\n                      height='1em'\r\n                      width='1em'\r\n                      xmlns='http://www.w3.org/2000/svg'\r\n                    >\r\n                      <path d='M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z'></path>\r\n                    </svg>\r\n                  </button>\r\n                  <button\r\n                    type='button'\r\n                    className='todo-item-delete'\r\n                    onClick={() => deleteItem(todo.id)}\r\n                  >\r\n                    <svg\r\n                      stroke='currentColor'\r\n                      fill='currentColor'\r\n                      strokeWidth='0'\r\n                      viewBox='0 0 448 512'\r\n                      height='1em'\r\n                      width='1em'\r\n                      xmlns='http://www.w3.org/2000/svg'\r\n                    >\r\n                      <path d='M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z'></path>\r\n                    </svg>\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { hideAlert } from '../slices/alertSlice'\r\n\r\nconst Alert = () => {\r\n  const dispatch = useDispatch()\r\n  const alert = useSelector((state) => state.alerts)\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      dispatch(hideAlert())\r\n    }, 1500)\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [alert])\r\n\r\n  return <div className={`alert alert-${alert.type}`}>{alert.title}</div>\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { removeAll, addTodo } from './slices/todoSlice'\nimport { showAlert } from './slices/alertSlice'\nimport List from './Components/List'\nimport Alert from './Components/Alert'\n\nfunction App() {\n  const [name, setName] = useState('')\n\n  const dispatch = useDispatch()\n  const todoList = useSelector((state) => state.todos.todoList)\n  const alert = useSelector((state) => state.alerts)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (!name) {\n      dispatch(\n        showAlert({\n          type: 'danger',\n          title: 'Please enter a value',\n        })\n      )\n    } else {\n      dispatch(addTodo(name))\n      dispatch(\n        showAlert({\n          type: 'success',\n          title: 'Item added to the list',\n        })\n      )\n      setName('')\n    }\n  }\n\n  const removeItems = () => {\n    dispatch(removeAll())\n    dispatch(\n      showAlert({\n        type: 'danger',\n        title: 'All Items removed',\n      })\n    )\n  }\n\n  return (\n    <div className='app'>\n      <section className='todo-wrapper'>\n        {alert.isVisible && <Alert />}\n        <div className='todo-container'>\n          {/* <ThemeToggle /> */}\n          <div className='todo-top'>\n            <h1 className='todo-title'>Todo List</h1>\n            {todoList.length > 0 && (\n              <div className='todo-count'>{todoList.length} items</div>\n            )}\n          </div>\n          <form className='todo-form' onSubmit={handleSubmit}>\n            <div className='todo-form-input'>\n              <input\n                type='text'\n                value={name}\n                placeholder='enter something...'\n                onChange={(e) => setName(e.target.value)}\n              />\n            </div>\n            <button>Add</button>\n          </form>\n          <List />\n          {todoList.length > 1 && (\n            <div className='todo-button-group'>\n              <button\n                type='button'\n                className='remove-btn'\n                onClick={removeItems}\n              >\n                Remove all\n              </button>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport todoReducer from './slices/todoSlice'\r\nimport alertReducer from './slices/alertSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n    alerts: alertReducer,\r\n  },\r\n})\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}